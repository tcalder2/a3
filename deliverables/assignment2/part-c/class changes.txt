We could not colour the new class diagram to show the differences.  There are a ton of differences.

Most of the methods have been moved to static methods so they don't take up extra memory.  They are, by paradigm, intrinsically static.

Most static methods now take in a copy of the object.  The server will decide, by the ID, which object is being held.  The User class demonstrates this shift, and why it is so effective, very well.

Some of the user methods that dealt with other classes were moved to their respective classes because the user is a singleton so we're always talking about just one user.  This makes a lot more sense.

-----
User:
Removed password
  - Password only matters to server
  - We don't want to store this in memory for long
  
Added getProgenies
  - This reduces the need to always grab all the progenies from the server
  - Now we have a static method to get progenies on demand
  
Added getQuestions

Added getUser

Removed setSkin
 - Doesn't logically belong to the user object
 
--------
Progeny:

Removed is_deleted
 -only server needs to know
 

-------------
LevelProgeny:

No changes other than the ones already described above for other classes and new conventions

------
Level:

No changes